#ifndef PLAYER
#define PLAYER

#include <string>
#include <vector>

class Player
{
    friend class PlayerManager;
public:
    //-----------------------------------------------------------------------------
    /// default constructor
    //-----------------------------------------------------------------------------
    Player();
    //-----------------------------------------------------------------------------
    /// constructor
    //-----------------------------------------------------------------------------
    Player(const std::string &name);
    //-----------------------------------------------------------------------------
    /// @brief method that sets the name of a Player
    //-----------------------------------------------------------------------------
    void setName(const std::string &i_name);
    //-----------------------------------------------------------------------------
    /// @brief method that returns how much the possessions of the player worth
    //-----------------------------------------------------------------------------
    unsigned int getPossessionsValue() const;
    //-----------------------------------------------------------------------------
    /// @brief method that resets all the members of the Player
    //-----------------------------------------------------------------------------
    void reset();
    //-----------------------------------------------------------------------------
    /// @brief default destructor
    //-----------------------------------------------------------------------------
    ~Player();


private:
    //-----------------------------------------------------------------------------
    /// @brief the name of the Player
    //-----------------------------------------------------------------------------
    std::string m_name;
    //-----------------------------------------------------------------------------
    /// @brief the balance of the Player
    //-----------------------------------------------------------------------------
    int m_balance;
    //-----------------------------------------------------------------------------
    /// @brief the position of the Player on the Board
    //-----------------------------------------------------------------------------
    unsigned int m_position;
    //-----------------------------------------------------------------------------
    /// @brief whether or not the player is in jail, -1 if not in jail else
    ///        represents how many time you can still try to get out free
    //-----------------------------------------------------------------------------
    int m_isJailed;
    //-----------------------------------------------------------------------------
    /// @brief number of "get out of Jail" Cards the player owns
    //-----------------------------------------------------------------------------
    unsigned int m_numOfGetOutOfJailCards;

};

#endif //PLAYER
